From 0f801caf1a0f94eb13198afda3ef1f484e1fac19 Mon Sep 17 00:00:00 2001
From: Zhenbo Li <litimetal@gmail.com>
Date: Tue, 26 Aug 2014 23:02:38 +0800
Subject: [PATCH 3/3] mshtml: Added IHTMLStorage:: getItem/setItem methods
 implementation.
To: wine-patches@winehq.org
Reply-To: wine-devel@winehq.org
CC: litimetal@gmail.com

---
 dlls/mshtml/htmlstorage.c   | 50 ++++++++++++++++++++++++++++++---
 dlls/mshtml/tests/htmldoc.c | 67 +++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 113 insertions(+), 4 deletions(-)

diff --git a/dlls/mshtml/htmlstorage.c b/dlls/mshtml/htmlstorage.c
index 2d391f8..b46c474 100644
--- a/dlls/mshtml/htmlstorage.c
+++ b/dlls/mshtml/htmlstorage.c
@@ -148,15 +148,57 @@ static HRESULT WINAPI HTMLStorage_key(IHTMLStorage *iface, LONG lIndex, BSTR *p)
 static HRESULT WINAPI HTMLStorage_getItem(IHTMLStorage *iface, BSTR bstrKey, VARIANT *p)
 {
     HTMLStorage *This = impl_from_IHTMLStorage(iface);
-    FIXME("(%p)->(%s %p)\n", This, debugstr_w(bstrKey), p);
-    return E_NOTIMPL;
+    nsAString key, value;
+    const PRUnichar *pval;
+    nsresult nsres;
+
+    TRACE("(%p)->(%s %p)\n", This, debugstr_w(bstrKey), p);
+
+    nsAString_InitDepend(&key, bstrKey);
+    nsAString_Init(&value, NULL);
+
+    nsres = nsIDOMStorage_GetItem(This->nsstorage, &key, &value);
+    nsAString_Finish(&key);
+    if (NS_FAILED(nsres)) {
+        ERR("GetItem failed: %08x\n", nsres);
+        V_VT(p) = VT_NULL;
+        nsAString_Finish(&value);
+        return E_FAIL;
+    }
+
+    nsAString_GetData(&value, &pval);
+    if(*pval) {
+        V_VT(p) = VT_BSTR;
+        V_BSTR(p) = SysAllocString(pval);
+    }else {
+        V_VT(p) = VT_NULL;
+    }
+    nsAString_Finish(&value);
+
+    return S_OK;
 }
 
 static HRESULT WINAPI HTMLStorage_setItem(IHTMLStorage *iface, BSTR bstrKey, BSTR bstrValue)
 {
     HTMLStorage *This = impl_from_IHTMLStorage(iface);
-    FIXME("(%p)->(%s %s)\n", This, debugstr_w(bstrKey), debugstr_w(bstrValue));
-    return E_NOTIMPL;
+    nsAString key, value;
+    nsresult nsres;
+
+    TRACE("(%p)->(%s %s)\n", This, debugstr_w(bstrKey), debugstr_w(bstrValue));
+
+    nsAString_InitDepend(&key, bstrKey);
+    nsAString_InitDepend(&value, bstrValue);
+
+    nsres = nsIDOMStorage_SetItem(This->nsstorage, &key, &value);
+    nsAString_Finish(&key);
+    nsAString_Finish(&value);
+
+    if (NS_FAILED(nsres)) {
+        ERR("SetItem failed: %08x\n", nsres);
+        return E_FAIL;
+    }
+
+    return S_OK;
 }
 
 static HRESULT WINAPI HTMLStorage_removeItem(IHTMLStorage *iface, BSTR bstrKey)
diff --git a/dlls/mshtml/tests/htmldoc.c b/dlls/mshtml/tests/htmldoc.c
index d79f4b5..45accdb 100644
--- a/dlls/mshtml/tests/htmldoc.c
+++ b/dlls/mshtml/tests/htmldoc.c
@@ -262,6 +262,35 @@ static const WCHAR wszTimesNewRoman[] =
 static const WCHAR wszArial[] =
     {'A','r','i','a','l',0};
 
+/* Based on debugstr_variant in dlls/jscript/jsutils.c. */
+static const char *debugstr_variant(const VARIANT *var)
+{
+    static char buf[400];
+
+    if (!var)
+        return "(null)";
+
+    switch (V_VT(var))
+    {
+    case VT_EMPTY:
+        return "{VT_EMPTY}";
+    case VT_BSTR:
+        sprintf(buf, "{VT_BSTR: %s}", wine_dbgstr_w(V_BSTR(var)));
+        break;
+    case VT_BOOL:
+        sprintf(buf, "{VT_BOOL: %x}", V_BOOL(var));
+        break;
+    case VT_UI4:
+        sprintf(buf, "{VT_UI4: %u}", V_UI4(var));
+        break;
+    default:
+        sprintf(buf, "{vt %d}", V_VT(var));
+        break;
+    }
+
+    return buf;
+}
+
 static int strcmp_wa(LPCWSTR strw, const char *stra)
 {
     CHAR buf[512];
@@ -979,6 +1008,7 @@ static HRESULT WINAPI PropertyNotifySink_OnChanged(IPropertyNotifySink *iface, D
     case 3000030:
     case 3000031:
     case 3000032:
+    case 3000033:
         /* TODO */
         return S_OK;
     }
@@ -3272,6 +3302,7 @@ static HRESULT WINAPI EventDispatch_Invoke(IDispatch *iface, DISPID dispIdMember
     case 1044:
     case 1048:
     case 1049:
+    case 1057:
         break; /* FIXME: Handle these events. */
     default:
         ok(0, "Unexpected DISPID: %d\n", dispIdMember);
@@ -7431,6 +7462,38 @@ static void test_QueryInterface(IHTMLDocument2 *htmldoc)
     IUnknown_Release(qi);
 }
 
+#define test_storage_set(s,k,v)  _test_storage_set(__LINE__,s,k,v)
+static void _test_storage_set(unsigned line, IHTMLStorage *storage, const char *key, const char *value)
+{
+    BSTR bstrKey, bstrValue;
+    HRESULT hres;
+
+    bstrKey = a2bstr(key);
+    bstrValue = a2bstr(value);
+    hres = IHTMLStorage_setItem(storage, bstrKey, bstrValue);
+    SysFreeString(bstrKey);
+    SysFreeString(bstrValue);
+
+    ok_(__FILE__,line) (hres == S_OK, "setItem (\"%s\": \"%s\") failed: %08x\n", key, value, hres);
+}
+
+#define test_storage_get(s,k,e) _test_storage_get(__LINE__,s,k,e)
+static void _test_storage_get(unsigned line, IHTMLStorage *storage, const char *key, const char *exval)
+{
+    BSTR bstrKey;
+    VARIANT var;
+    HRESULT hres;
+
+    bstrKey = a2bstr(key);
+    hres = IHTMLStorage_getItem(storage, bstrKey, &var);
+
+    ok_(__FILE__,line) (hres == S_OK, "getItem (\"%s\") failed: %08x\n", key, hres);
+    ok_(__FILE__,line) (!strcmp_wa(V_BSTR(&var), exval), "expect %s, got %s\n", exval, debugstr_variant(&var));
+
+    SysFreeString(bstrKey);
+    VariantClear(&var);
+}
+
 static void test_sessionStorage(IHTMLWindow6 *window)
 {
     HRESULT hres;
@@ -7442,6 +7505,10 @@ static void test_sessionStorage(IHTMLWindow6 *window)
     if(hres != S_OK || storage == NULL)
         return;
 
+    test_storage_set(storage, "test key", "test value");
+    test_storage_get(storage, "test key", "test value");
+
+
     IHTMLStorage_Release(storage);
 }
 
-- 
1.9.3

